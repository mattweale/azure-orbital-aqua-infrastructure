name: "Terraform"

on: [workflow_dispatch]

jobs:
  terraform_deploy:
    name: "Deploy Terraform"
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_VAR_AQUA_TOOLS_SA: ${{ secrets.AZURE_AQUA_TOOLS_STORAGE_ACCOUNT }}
      AZURE_BACKEND_RG_NAME: ${{ secrets.AZURE_BACKEND_RG_NAME }}
      AZURE_BACKEND_SA_NAME: ${{ secrets.AZURE_BACKEND_SA_NAME }}
      AZURE_BACKEND_CONTAINER_NAME: ${{ secrets.AZURE_BACKEND_CONTAINER_NAME }}
      AZURE_BACKEND_BLOB_NAME: ${{ secrets.AZURE_BACKEND_BLOB_NAME }}
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Get the IP Address of the Build Agent
      - name: Get Build Agent IP
        run: |
          echo "TF_VAR_BUILD_AGENT_IP=$(curl 'https://api.ipify.org')" >> $GITHUB_ENV
           echo "This GitHub Workflow agent public IP is: ${{env.TF_VAR_BUILD_AGENT_IP}}"

        # Show IP
      - name: "Echo the IP"
        run: |
          echo ${{ env.TF_VAR_BUILD_AGENT_IP }}

        # Create Terraform Backend Config File
      - name: "Create Terraform Backend Config File"
        run: |
          cat <<EOT  >>  ${GITHUB_WORKSPACE}/azurerm.tfbackend
          resource_group_name  = "${{ env.AZURE_BACKEND_RG_NAME }}"
          storage_account_name = "${{ env.AZURE_BACKEND_SA_NAME }}"
          container_name       = "${{ env.AZURE_BACKEND_CONTAINER_NAME }}" 
          key                  = "${{ env.AZURE_BACKEND_BLOB_NAME }}"
          EOT
          chmod +r  ${GITHUB_WORKSPACE}/azurerm.tfbackend

        # Echo the backend config file
      - name: "Check the Terraform backend config file"
        run: |
          tail  ${GITHUB_WORKSPACE}/azurerm.tfbackend

        # Deploy the Terraform
      - name: "Terraform Format"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.0
          tf_actions_subcommand: "fmt"
          tf_actions_working_dir: "./main"

      - name: "Terraform Init"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.0
          tf_actions_subcommand: "init"
          args: "-backend-config=${GITHUB_WORKSPACE}/azurerm.tfbackend"
          tf_actions_working_dir: "./main"

      - name: "Terraform Validate"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.0
          tf_actions_subcommand: "validate"
          tf_actions_working_dir: "./main"

      - name: "Terraform Plan"
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.0
          tf_actions_subcommand: "plan"
          tf_actions_working_dir: "./main"
      #- name: Terraform Apply
      #  if: github.ref == 'refs/heads/main'
      #  uses: hashicorp/terraform-github-actions@master
      #  with:
      #    tf_actions_version: 1.3.0
      #    tf_actions_subcommand: "apply"
      #    tf_actions_working_dir: "./main"
